/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("class Task {\n  project;\n\n  constructor(title, description, dueDate, priority) {\n    this.title = title;\n    this.description = description;\n    this.dueDate = dueDate;\n    this.priority = priority;\n  }\n}\n\nconst main = document.querySelector('main');\n\nconst localStorage = [\n  new Task('projects pane', `let's go to the mall you guys`, new Date(), 'low'),\n  new Task('plant a carrot', 'solve world hunger', new Date(), 'medium'),\n];\n\nfunction buildTaskList() {\n  // New Task button\n  main.innerHTML = /*html*/`\n    <button type=\"button\" id=\"createNewTask\">New Task</button>\n  `;\n  const newTaskButton = main.querySelector('#createNewTask');\n  newTaskButton.addEventListener('click', buildNewTaskForm);\n\n  // Create each task item in UI\n  localStorage.forEach(task => {  \n    const newElement = document.createElement('div');\n    newElement.innerHTML = /*html*/`\n      <p>${task.title}</p>\n      <button type=\"button\" class=\"editTask\">‚úè</button>\n      <button type=\"button\" class=\"cancelTask\">X</button>\n    `;\n\n    // Edit button\n    const editTask = newElement.querySelector('button.editTask');\n    editTask.addEventListener('click', buildEditTaskForm.bind(null, task));\n    newElement.classList.add('taskItem');\n    main.appendChild(newElement);\n\n    // Delete button\n    const deleteTask = newElement.querySelector('button.cancelTask');\n    deleteTask.addEventListener('click', () => {\n      const taskIndex = localStorage.findIndex(item => item === task);\n      localStorage.splice(taskIndex, 1);\n      buildTaskList();\n    });\n  });\n}\n\nfunction buildEditTaskForm(task) {\n  // Format task date for HTML\n  const taskYear = task.dueDate.getUTCFullYear().toString();\n  const taskMonth = (task.dueDate.getUTCMonth() + 1).toString().padStart(2, '0');\n  const taskDay = task.dueDate.getUTCDate().toString().padStart(2, '0');\n  const taskDate = `${taskYear}-${taskMonth}-${taskDay}`;\n  \n  // Build edit form\n  main.innerHTML = /*html*/`\n    <form id=\"editTaskForm\">\n      <label for=\"title\">Title:</label><br>\n      <input type=\"text\" name=\"title\" value=\"${task.title}\"><br>\n\n      <label for=\"description\">Description:</label><br>\n      <input type=\"text\" name=\"description\" value=\"${task.description}\"><br>\n\n      <label for=\"dueDate\">Due Date:</label><br>\n      <input type=\"date\" name=\"dueDate\" value=\"${taskDate}\"><br>\n\n      <label for=\"priority\">Priority:</label><br>\n      <select name=\"priority\">\n        <option value=\"high\" \n          ${task.priority === 'high' ? 'selected' : ''}>High</option>\n        <option value=\"medium\" \n          ${task.priority  === 'medium' ? 'selected' : ''}>Medium</option>\n        <option value=\"low\" \n          ${task.priority === 'low' ? 'selected' : ''}>Low</option>\n      </select><br><br>\n\n      <button type=\"button\" id=\"saveTask\">Save</button>\n      <button type=\"button\" id=\"cancelEditTask\">Cancel</button>\n    </form>\n  `;\n\n  // Save button\n  const saveTask = main.querySelector('#saveTask');\n  saveTask.addEventListener('click', () => {\n    const newTitle = main.querySelector('input[name=\"title\"]').value;\n    const newDesc = main.querySelector('input[name=\"description\"]').value;\n    const newDueDate = main.querySelector('input[name=\"dueDate\"]').valueAsDate;\n    const newPriority = main.querySelector('select[name=\"priority\"]').value;\n    if (newTitle && newDesc && newDueDate && newPriority) {\n      task.title = newTitle;\n      task.description = newDesc;\n      task.dueDate = newDueDate;\n      task.priority = newPriority;\n      buildTaskList();\n    } else {\n      alert('Please fill out all fields');\n    }\n  });\n\n  // Cancel button\n  const cancelEditTask = main.querySelector('#cancelEditTask');\n  cancelEditTask.addEventListener('click', buildTaskList);\n}\n\nfunction buildNewTaskForm() {\n  // Form\n  main.innerHTML = /*html*/`\n    <form id=\"newTaskForm\">\n      <label for=\"title\">Title:</label><br>\n      <input type=\"text\" name=\"title\"><br>\n\n      <label for=\"description\">Description:</label><br>\n      <input type=\"text\" name=\"description\"><br>\n\n      <label for=\"dueDate\">Due Date:</label><br>\n      <input type=\"date\" name=\"dueDate\"><br>\n\n      <label for=\"priority\">Priority:</label><br>\n      <select name=\"priority\">\n        <option value=\"high\">High</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"low\" selected>Low</option>\n      </select><br><br>\n\n      <button type=\"button\" id=\"addTask\">Save</button>\n      <button type=\"button\" id=\"cancelNewTask\">Cancel</button>\n    </form>\n  `;\n\n  // Save button\n  const saveTask = main.querySelector('#addTask');\n  saveTask.addEventListener('click', () => {\n    const title = main.querySelector('input[name=\"title\"]').value;\n    const desc = main.querySelector('input[name=\"description\"]').value;\n    const dueDate = main.querySelector('input[name=\"dueDate\"]').valueAsDate;\n    const priority = main.querySelector('select[name=\"priority\"]').value;\n    if (title && desc && dueDate && priority) {\n      newTask = new Task(title, desc, dueDate, priority);\n      localStorage.push(newTask);\n      buildTaskList();\n    } else {\n      alert(\"Please fill out all fields\");\n    }\n  });\n\n  // Cancel button\n  const cancelNewTask = main.querySelector('#cancelNewTask');\n  cancelNewTask.addEventListener('click', buildTaskList);\n}\n\n\nbuildTaskList();\n\n\n\n//# sourceURL=webpack://todo-list/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;